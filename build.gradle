import groovy.sql.Sql

plugins {
    id 'org.springframework.boot' version '2.1.4.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
}

group = 'com.shchur.dmitriy'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
    //This repository added to get oracle db driver in test mode.
    maven {
        url "http://nexus.saas.hand-china.com/content/repositories/rdc/"
    }
}

sourceSets.main.resources {
    srcDir "src/main/resources"
    srcDir "config"
}

configurations {
    hsqldb
    mysql
    postgre
    oracle
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    hsqldb group: 'org.hsqldb', name: 'hsqldb', version: '2.4.0'
    mysql group: 'mysql', name: 'mysql-connector-java', version: '8.0.18'
    postgre group: 'org.postgresql', name: 'postgresql', version: '42.2.5'
    oracle group: 'com.oracle', name: 'ojdbc7', version: '12.1.0.2'

    compile configurations.hsqldb
    compile configurations.mysql
    compile configurations.postgre
    compile configurations.oracle
}

test {
    useJUnitPlatform()
}


URLClassLoader loader = GroovyObject.class.classLoader as URLClassLoader

def props = new Properties()
file("config/application.properties").withInputStream {props.load(it)}

def configuration
switch(props.getProperty("gradle.datasource.name")) {
    case "mysql":
        configuration = configurations.mysql
        break
    case "postgre":
        configuration = configurations.postgre
        break
    case "oracle":
        configuration = configurations.oracle
        break
    case "hsqldb":
        configuration = configurations.hsqldb
        break
    default:
        println "Not supported database name"
}
configuration.each {
    File file ->
        loader.addURL(file.toURI().toURL())
        println "Added url: $file"
}


def executeScript (Properties props, File scriptFile) {
    def con = getConnection(props)

    String[] scripts = scriptFile.text.split(";")
    scripts.each {String script -> if (!script.trim().isEmpty()) con.execute(script + ";")}
    con.close()
}

def importFromFile (Properties props, File csvFile) {
    def con = getConnection(props)

    def people = con.dataSet("person")
    def photosHostAddress = props.getProperty("photos.host.address")

    csvFile.splitEachLine(", $photosHostAddress") {fields ->
        if (fields[1] != null) {
            people.add(name: fields[0], photo_path: fields[1])
        }
    }
}

static def getConnection (Properties props) {
    def url = props.getProperty("datasource.url")
    def user = props.getProperty("datasource.username")
    def pass = props.getProperty("datasource.password")
    def driver = props.getProperty("datasource.connector")

    return Sql.newInstance(url, user, pass, driver)
}


task startHsqldbServer (type: JavaExec) {
    classpath configurations.hsqldb
    main = 'org.hsqldb.server.Server'
}

task createTables {
    doLast {
        def datasource_name = props.getProperty("gradle.datasource.name")
        def file_name = "sqlscripts/${datasource_name}create.sql"
        executeScript(props, file(file_name))
    }
}

task cleanTables {
    doLast {
        executeScript(props, file('sqlscripts/clean.sql'))
    }
}

task dropTables {
    doLast {
        executeScript(props, file('sqlscripts/drop.sql'))
    }
}

task fillFromPeopleFile {
    doLast {
        importFromFile(props, file('people.csv'))
    }
}
